[tool.poetry]
name = "template"
version = "0.1.0"
description = "A template repository for python projects."
authors = ["Adam Hendry <adam.hendry@medtronic.com>"]
license = "Apache-2.0"
readme = "README.rst"
repository = "https://github.com/mdt-neurovascular/template"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10"
]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
appdirs = ">=1.4.4"  # Abstracts program installation and user paths across all OSs
cookiecutter = ">=2.2.3"  # Utility for creating Python projects from templates
Jinja2 = ">=3.0,<3.1"  # # Templating engine; See https://github.com/astropy/astropy/issues/11725
seedir = ">=0.3.0"  # Creates folder tree diagrams
tomli = ">=2.0.1"  # TOML parser for Python<3.11

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
beautifulsoup4 = ">=4.11.1"  # Pulls data out of HTML files (e.g. validate docs)
graphviz = ">=0.20"  # Render graphs
html5lib = ">=1.1"  # HTML5 parser
instaviz = ">=0.6.0"  # AST and Code Objects visualizer
lxml = ">=4.8.0"  # Python binding for libxml2 and libxslt C libraries
numpydoc = ">=1.4.0"  # Numpy docstring format support in Sphinx
objgraph = ">=3.5.0"  # Visually explore graphviz graphs
Sphinx = [
    { version = "<4", python = "<3.10" },
    { version = "<3.5", python = ">=3.10" }
]  # Documentation/static-site generator; See https://github.com/astropy/astropy/issues/11725
sphinx-book-theme = ">=0.3.3"  # `sphinx` theme mimicing interactive book feel
sphinxcontrib-email = ">=0.3.5"  # `sphinx` extension for obfuscating email `mail-to` links
sphinxcontrib-mermaid = ">=0.7.1"  # `sphinx` extension for embedding `Mermaid` graphs
sphinxcontrib-napoleon = ">=0.7"  # `sphinx` extension to parse Numpy/Google-style docstrings and convert to rST before rendering

[tool.poetry.group.format]
optional = true

[tool.poetry.group.format.dependencies]
add-trailing-comma = ">=2.2.3"  # Add trailing commas to calls and literals
black = ">=22.3.0"  # PEP 8 auto-formatter
blacken-docs = ">=1.12.1"  # Apply `black` to code in docs
codespell = ">=2.1.0"  # Spell checker
commitizen = ">=3.6.0"  # Conventional commits standard enforcer
isort = ">=5.10.1"  # Sorts imports alphabetically per PEP 8
pre-commit = ">=2.18.1"  # Multi-language package manager for pre-commit hooks
pycln = ">=1.3.5"  # Formatter for removing unused imports
pydocstringformatter = ">=0.7.0"  # PEP 257 and Numpy/Google/Sphinx-style auto-formatter
pylint = ">=2.13.8"  # Static code analyzer for code smells
rstcheck = { extras = ["toml", "sphinx"], version = ">=5.0.0" }  # reStructuredText syntax linter
ruff = ">=0.0.282"  # Fast Python linter written in Rust
vulture = ">=2.3"  # Find and clean dead code (static code analyzer)

[tool.poetry.group.github]
optional = true

[tool.poetry.group.github.dependencies]
pytest-github-actions-annotate-failures = ">=0.2.0"  # pytest plugin to annotate failed tests with a workflow command for GitHub Actions
tox-gh-actions = ">=3.1.3"  # tox plugin to run tox on GitHub Actions

[tool.poetry.group.license]
optional = true

[tool.poetry.group.license.dependencies]
licensecheck = "^2023.3"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage = { extras = ["toml"], version = ">=6.4" }  # Measures code coverage
hypothesis = ">=6.46.2"  # Property-based testing
pytest = ">=7.1.2"  # Unit testing framework
pytest-cov = ">=3.0.0"  # `pytest` plugin for producing test coverage reports
pytest-doctestplus = ">=0.12.0"  # `pytest` plugin for testing example code in docstrings
pytest-env = ">=0.6.2"  # `pytest` plugin for setting environment variables in `pyproject.toml`
pytest-memprof = ">=0.2.0"  # `pytest` plugin for estimating memory consumption of tests
pytest-mock = ">=3.7.0"  # `pytest` plugin providing a `mocker` fixture
pytest-randomly = ">=3.11.0"  # `pytest` plugin to randomly order test execution and control `random.seed`
pytest-xdist = ">=2.5.0"  # `pytest` plugin enabling testing across multiple CPUs (i.e. `pytest -n auto`)
tox = ">=3.25.0"  # Run tests for multiple Python versions in separated isolated (non-"tox"ic) environments

[tool.poetry.group.type]
optional = true

[tool.poetry.group.type.dependencies]
mypy = ">=0.991"  # Static type checker
mypy-extensions = ">=0.4.3"  # Extensions to `typing` module supported by `mypy` for older Python versions
pydantic = ">=1.10.2"  # Data validation using type hints (`mypy` plugin)
pyright = ">=1.1.253"  # Microsoft's static type checker for Python
tqdm-stubs = ">=0.2.0"  # `tqdm` type hinting stubs
types-beautifulsoup4 = ">=4.11.6.1"  # `bs4` type hinting stubs
types-setuptools = ">=57.4.17"  # `setuptools` type hinting stubs
typing-extensions = ">=4.2.0"  # Enables type hinting features across various Python versions

[tool.poetry.extras]
dev = ["dev", "format", "license", "test", "type"]
docs = ["docs"]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"  # Python language

[tool.ruff]
# Enable linting and formatting rules
select = [
    "A",  # flake8-builtins (Linter to check for python builtins being used as variables or parameters)
    "ARG",  # flake8-unused-arguments (Linter for unused arguments)
    "B",  # flake8-bugbear (Linter for additional flake8 rules)
    "BLE",  # flake8-blined-except (Linter for bare `except Exception/BaseException`)
    "C4",  # flake8-comprehensions (Linter for writing better comprehensions)
    "C90",  # mccabe (Linter for code complexity)
    "D",  # pydocstyle (Static code analyzer for PEP 257 and Numpy/Google/Sphinx-style docstrings)
    "DTZ",  # flake8-datetimez (Lint for usage of unsafe naive datetime class)
    "E",  # pycodestyle (PEP 8 style guide checker)
    "F",  # pyflakes (Static code analyzer for code smells)
    "FA",  # flake8-future-annotations (Linter for `from __future__ import annotations`)
    "FBT",  # flake8-boolean-trap (Linter for antipattern of using a positional boolean arg to switch behavior in public API)
    "FLY",  # flynt (Linter to enforce using f-strings over join
    "ICN",  # flake8-import-conventions (Linter for commonly accepted `import as` statements, e.g. `import pandas as pd`)
    "INP",  # flake8-no-pep420  (Linter to prevent namespace packages)
    "ISC",  # flake8-implicit-str-concat (Linter for improper string concatenation usages)
    "N",  # pep8-naming (PEP 8 class, function, variable naming linter)
    "PERF",  # perflint (Linter for performance antipatterns)
    "PGH",  # flake8-pygrep-hooks (Linter for using `eval` and adding rule codes to type ignores)
    "PIE",  # flake8-pie (Linter for extra flake8 rules)
    "PT",  # flake8-pytest-style (Linter for pytest)
    "PTH",  # flake8-use-pathlib (Linter for using pathlib over os)
    "PYI",  # flake8-pyi (Linter for stub files)
    "Q",  # flake8-quotes (Linter for consistent string quoting)
    "RSE",  # flake8-raise (Linter for common `raise` statement errors)
    "RUF",  # ruff-specific rules
    "S",  # bandit (Static code analyzer for security issues)
    "SIM",  # flake8-simplify (Linter to simplify certain expressions in code)
    "SLF",  # flake8-self (Linter to prevent private member access)
    "SLOT",  # flake8-slots (Linter to require `__slots__` for subclasses of immutable types)
    "T10",  # flake8-debugger (Linter for left in pdb/ipdb statements in code)
    "T20",  # flake8-print (Linter for left over `(p)print` statements)
    "TCH",  # flake8-type-checking (Linter to use `if TYPE_CHECKING` if module not needed at runtime)
    "TRY",  # tryceratops (Linter for exception handling antipatterns)
    "UP",  # pyupgrade
    "YTT",  # flake8-2020 (Linter for `sys.version` usage errors with Python>=3.10),
]
ignore = [
    # pycodestyle
    "E203",  # Whitespace before ':'
    "E501",  # Line length too long
    "E731",  # Do not assign a lambda expression, use a def

    # pydocstyle
    "D101",  # Missing class docstring; Use docstring in `__init__` instead
    "D105",  # Missing docstring in magic method

    # pep8-naming
    "N802",  # Qt uses camelCase

    # bandit
    "S101",  # `assert` is removed when compiling to optimized bytecode; (ignored for `pytest`)
    "S301",  # builtin `pickle` module can be unsafe
]

line-length = 90
target-version = "py38"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    "__pycache__",
    "__pypackages__",
    "_build",
    ".bzr",
    ".cache",
    ".direnv",
    ".eggs",
    ".git-rewrite",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "*.egg-info",
    "*.pyc",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # "Imported but unused: happens with packages
"{{ cookiecutter.project_slug }}/src/{{ cookiecutter.project_slug }}/__init__.py" = ["N999"]  # Cookiecutter template uses jinja syntax

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.black]
line-length = 90
skip-string-normalization = true
target-version = ["py38"]
include = '.*\.pyi?$'
exclude = '{{\s*cookiecutter\.project_slug\s*}}|\.eggs|\.git|\.mypy_cache|\.tox|\.venv|build|dist'

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
version_files = [
    "{{cookiecutter.project_slug }}.__init__.py",
    "pyproject.toml:version",
    "{{cookiecutter.project_slug }}.iss:AppVersion"
]
update_changelog_on_bump = true
gpg_sign = false
tag_format = "$version"
bump_message = "bump: version $current_version → $new_version"
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "italic"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.coverage.run]
branch = true
# Append machine name, process id, and random number to data file name so coverage can be
# run in parallel environments, e.g. in tox.
parallel = true
# `shiboken6`, which creates the python bindings for `Qt` C++ source, imports from a
# `zip` file into the top-level directory at runtime. These files are deleted after
# running, but `coverage` attempts to look at their source after they're gone, causing
# warnings to appear. Namely, it looks for these modules/files:
#
#    project_dir/pysrcript
#    project_dir/shibokensupport
#    project_dir/signature_bootstrap.py
#
# To avoid this error, `source` is specified to the package subdirectory. However, this
# can also be avoided by explicitly omitting these folders in the `omit` section.
#
# See https://github.com/nedbat/coveragepy/issues/1392
omit = [
    '.vscode/',
    '.venv/',
    'tests/',
]
disable_warnings = ['no-data-collected']

[tool.coverage.html]
directory = 'logs/coverage/html'

[tool.coverage.json]
output = 'logs/coverage/coverage.json'

[tool.coverage.xml]
output = 'logs/coverage/coverage.xml'

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'def __repr__',
    'raise AssertionError',
    'raise NotImplementedError',
    'if __name__ == .__main__.:',
    '@(abc\.)?abstractmethod'
]

[tool.coverage.paths]
source = [
    "*/site-packages"
]

[tool.isort]
profile = "black"
add_imports = [
    "from __future__ import annotations"  # Automatically add to module on save if not there
]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 90
skip_glob = [
    # Certain packages require a specific sort order
    # See: https://github.com/pyvista/pyvista/issues/3141
    ".venv/Lib/site-packages/*",
]

[tool.mypy]
python_version = "3.8"
disallow_untyped_defs = true
warn_return_any = true
warn_unused_configs = true
# ``warn_unused_ignores`` seems to be giving several false positives.
# See:
#   - https://github.com/python/mypy/issues/4412
#   - https://github.com/python/mypy/issues/5940
#   - https://github.com/python/mypy/issues/8823
#   - https://github.com/python/mypy/issues/2960
warn_unused_ignores = false
warn_redundant_casts = true
show_error_codes = true
# no_pretty = true
show_column_numbers = true
plugins = [
    "pydantic.mypy"
]
exclude = [
    '[.]venv/',
    'build/',
    'dist/',
]
# fast_module_lookup = true

[[tool.mypy.overrides]]
module = [
    "stubs.*",
]
ignore_errors = true
follow_imports = "skip"
follow_imports_for_stubs = false
ignore_missing_imports = true

[tool.pycln]
all = true
include = '.*\.pyi?$'
exclude = '^{{ cookiecutter\.project_slug }}/.*'

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.pylint.format]
# Ignore ``line-too-long`` errors for hyperlinks, which must remain on one line
ignore-long-lines = "https?://\\S+?$"

[tool.pylint.main]
fail-under = 10
ignore = [
    ".venv",
]
load-plugins = [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.check_elif",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.docparams",
    # I like lines between paragraphs
    # "pylint.extensions.empty_comment",
    "pylint.extensions.redefined_loop_name",
    # Untidy data structures require while
    # See: https://pylint.pycqa.org/en/latest/user_guide/messages/warning/while-used.html
    # See: https://stackoverflow.com/questions/920645/when-to-use-while-or-for-in-python
    # "pylint.extensions.while_used",
    "pylint.extensions.for_any_all",
    "pylint.extensions.no_self_use",
    "pylint.extensions.set_membership",
]

[tool.pylint."messages control"]
confidence = []
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "useless-import-alias",
    "fixme"  # TODO's can be useful
]

[tool.pylint.parameter_documentation]
default-docstring-type = "numpy"

[tool.pytest.ini_options]
minversion = "7.0"
# We want different runs each time (don't use seed)
# --randomly-seed=1234
addopts = """\
--last-failed --last-failed-no-failures all \
-p no:faulthandler \
--import-mode=importlib \
--cov \
--cov-report term-missing \
--doctest-rst \
--doctest-modules"""
testpaths = [
    "tests",
]
doctest_plus = "enabled"
env = [
    # "D:COVERAGE_DEBUG=trace",
    # "D:COVERAGE_DEBUG_FILE=debug_log.txt"
]
pythonpath = ["src"]

[tool.rstcheck]
# `rstcheck` is known to be buggy on Windows
# See Issue #107: https://github.com/rstcheck/rstcheck/issues/107
ignore_messages = [
    "(Duplicate label .*, other instance in .*)"
]

[tool.tox]
legacy_tox_ini = """
[tox]
minversion = 3.25.0
envlist = py{38,39,310},coverage
isolated_build = true

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310

[testenv]
allowlist_externals =
    poetry
    pytest
setenv =
    # See: https://github.com/tox-dev/tox/issues/1550
    PYTHONIOENCODING=utf-8
    COVERAGE_FILE=tox-.coverage.{envname}
commands =
    poetry install --no-root --sync
    poetry run pytest

# Not run by default. To run, use `tox -e coverage`
[testenv:coverage]
depends = py{38,39,310}
allowlist_externals =
    sh
deps =
    coverage
    tox
basepython = python3.10
setenv =
    COVERAGE_FILE=tox-.coverage
    COVERAGE_DEBUG=trace
    COVERAGE_DEBUG_FILE=stdout
commands =
    coverage debug data
    coverage combine --debug=pathmap
    coverage report -m --skip-covered
    coverage html
    coverage json
    sh -c 'mv -f tox-.coverage .coverage'
    sh -c 'rm -f tox-.coverage'
parallel_show_output = true

# Not run by default. To run, use `tox -e docs`
[testenv:docs]
allowlist_externals =
    sphinx-build
commands =
    sphinx-build -W --keep-going -b docs docs/build
"""

# Currently, poetry only supports pure python builds. This (undocumented) feature
# tells poetry to build wheels for the Host OS
[tool.poetry.build]
generate-setup-file = false
script = 'build.py'

[build-system]
requires = [
    "setuptools>=45",
    "wheel",
    "toml",
]
build-backend = "setuptools.build_meta"
